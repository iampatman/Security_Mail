/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package secureMail;

import java.awt.List;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.UnsupportedEncodingException;
import java.security.PrivateKey;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.crypto.SecretKey;
import javax.mail.Address;
import javax.mail.BodyPart;
import javax.mail.Message;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.Part;
import javax.mail.internet.MimeMessage;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;

/**
 *
 * @author PC
 */
public class Read_Mail extends javax.swing.JFrame {

    /**
     * Creates new form Read_Mail
     */
    Message msg;
    ArrayList<File> attachments;
    ContactList contactlist;
    Multipart multipart;
    SecretKey secretkey;
    String filename="";
    byte[] originalData;
    PrivateKey mypriv;
    public Read_Mail(Message msg, ContactList list,PrivateKey priv) {
        initComponents();
        this.msg = msg;
        this.mypriv = priv;
        this.contactlist = list;
        
        try {
            this.multipart = (Multipart)msg.getContent();
        } 
        catch(Exception e){
        }
        LoadMail();        
       // contactlist = new ContactList();
    }

    private Read_Mail() {
        throw new UnsupportedOperationException("Not yet implemented");
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jButton1 = new javax.swing.JButton();
        jButton2 = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jTextField1 = new javax.swing.JTextField();
        jTextField2 = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jComboBox1 = new javax.swing.JComboBox();
        jButton3 = new javax.swing.JButton();

        setTitle("Read Mail - Project 1");

        jButton1.setText("Verify Signature");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jButton2.setText("Download Attachment");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setLineWrap(true);
        jTextArea1.setRows(5);
        jTextArea1.setWrapStyleWord(true);
        jScrollPane1.setViewportView(jTextArea1);

        jTextField1.setEditable(false);

        jTextField2.setEditable(false);
        jTextField2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTextField2ActionPerformed(evt);
            }
        });

        jLabel1.setText("FROM:");

        jLabel2.setText("SUBJECT:");

        jLabel3.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel3.setText("DISPLAYING MAIL");

        jLabel4.setForeground(new java.awt.Color(0, 0, 255));
        jLabel4.setText("No attachments");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Symmetric", "Both" }));

        jButton3.setText("OK");
        jButton3.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton3ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(jLabel3)
                                    .addGap(125, 125, 125))
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel1)
                                        .addComponent(jLabel2))
                                    .addGap(18, 18, 18)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(jTextField1)
                                        .addComponent(jTextField2, javax.swing.GroupLayout.DEFAULT_SIZE, 339, Short.MAX_VALUE))))
                            .addComponent(jLabel4)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 109, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, 108, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jButton3)))
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel3)
                .addGap(15, 15, 15)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jTextField2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1)
                    .addComponent(jButton2)
                    .addComponent(jComboBox1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton3))
                .addGap(3, 3, 3)
                .addComponent(jLabel4)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 250, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTextField2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTextField2ActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTextField2ActionPerformed

    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
        try {
            // TODO add your handling code here:      
            //Download Attachments
            String str="";
            Multipart multipart = (Multipart)msg.getContent();
            byte buff[] = new byte[1024];
            for (int i=0;i<multipart.getCount();i++){
                BodyPart part = multipart.getBodyPart(i);
                String disposition = part.getDisposition();                        
                if (disposition != null && (disposition.equals("ATTACHMENT"))) {
                     InputStream is = part.getInputStream();                                          
                     File f=new File(part.getFileName());
                     OutputStream out = new FileOutputStream(f);
                     FileOutputStream fos = new FileOutputStream(f);                    
                     int len;                     
                     while ((len = is.read(buff, 0,buff.length))!=-1){
                         out.write(buff, 0, len);
                     }
                     out.flush();
                     out.close();
                     is.close();
                 }                
            }
            JOptionPane.showMessageDialog(null, "Download Completed", "Info: ", JOptionPane.INFORMATION_MESSAGE);
        } catch (IOException ex) {
            Logger.getLogger(Read_Mail.class.getName()).log(Level.SEVERE, null, ex);
        } catch (MessagingException ex) {
            Logger.getLogger(Read_Mail.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:
        byte[] data;
        data = originalData;
        
        Verify_Signature verifySignature = new Verify_Signature(jTextField1.getText(), data, contactlist,multipart);
        verifySignature.show();
    }//GEN-LAST:event_jButton1ActionPerformed
    public SecretKey Load_SecretKey(){
        
        String filepath="";
        JFileChooser fileChoose = new JFileChooser();
        int returnVal = fileChoose.showOpenDialog(this);         
        if(returnVal == JFileChooser.APPROVE_OPTION) {
            filename = fileChoose.getSelectedFile().getName();
            filepath = fileChoose.getSelectedFile().getAbsolutePath();
        }
        if (jComboBox1.getSelectedIndex()==2){
            Cryptography c = new Cryptography();
            return c.asymmetricDecrypt(mypriv, filepath);
            
        }
        else {
            KeyManager km = new KeyManager();
            return km.importSecretKey(filepath);
        }
    }
    public byte[] MergeByteArrat(byte[] a, byte[] b, int blen){
        byte[] c;
        c = new byte[a.length + blen];
        int i=0;
        for (i=0;i<a.length;i++){
            c[i] = a[i];
        }       
        i = a.length;
        for (int j=0;j<blen;j++){
            c[i] = b[j];
            i++;
        }
            
        return c;
    }
    private void jButton3ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton3ActionPerformed
        try {
            // TODO add your handling code here:
            byte[] plaintext = null;
            byte[] cyphertext;
            SecretKey mysec;
            cyphertext = jTextArea1.getText().getBytes("ISO-8859-1");
            Cryptography c = new Cryptography(plaintext, cyphertext);            
            if (jComboBox1.getSelectedIndex()!=0){
                try {                    
                    secretkey = this.Load_SecretKey();
                    mysec = secretkey;                                                                                       
                    c.symmetricDecrypt(secretkey);
                    plaintext = c.getPlaintext();
                    String text = new String(plaintext,"ISO-8859-1");
                    jTextArea1.setText(text);                
                    byte buff[] = new byte[1024];                
                    for (int i=0;i<multipart.getCount();i++){
                        BodyPart part = multipart.getBodyPart(i);
                        String disposition = part.getDisposition();      
                        if (part.getFileName() == null ? filename == null : part.getFileName().equals(filename)) {
                            continue;
                        }                        
                        if (disposition != null && (disposition.equals("ATTACHMENT"))) {
                             InputStream is = part.getInputStream();        
                             int len;                    
                             cyphertext = new byte[0];
                             while ((len = is.read(buff, 0,buff.length))!=-1){
                                cyphertext =  MergeByteArrat(cyphertext, buff,len);
                             }                        
                             c.ciphertext = cyphertext;
                             secretkey = mysec;
                             c.symmetricDecrypt(secretkey);
                             plaintext = c.plaintext;
                             File f=new File(part.getFileName());
                             OutputStream out = new FileOutputStream(f);
                             FileOutputStream fos = new FileOutputStream(f);                    
                             out.write(plaintext,0,plaintext.length);
                             out.flush();
                             out.close();
                             is.close();
                         }   
                     }
                } catch (Exception ex) {
                    Logger.getLogger(Read_Mail.class.getName()).log(Level.SEVERE, null, ex);
                }
                JOptionPane.showMessageDialog(null, "Decrypted Successfully", "OK", JOptionPane.INFORMATION_MESSAGE);
                
            }
        } catch (UnsupportedEncodingException ex) {
            Logger.getLogger(Read_Mail.class.getName()).log(Level.SEVERE, null, ex);
            
        }
        
    }//GEN-LAST:event_jButton3ActionPerformed

    /**
     * @param args the command line arguments
     */
    private boolean textIsHtml;
     private String getText(Part p) throws MessagingException, IOException {
        if (p.isMimeType("text/*")) {
            String s = (String)p.getContent();
            textIsHtml = p.isMimeType("text/html");
            if (textIsHtml) {
                return "";
            }
            else return s;
        }
        if (p.isMimeType("multipart/alternative")) {
            // prefer html text over plain text
            Multipart mp = (Multipart)p.getContent();
            String text = null;
            for (int i = 0; i < mp.getCount(); i++) {
                Part bp = mp.getBodyPart(i);
                if (bp.isMimeType("text/plain")) {
                    if (text == null)
                        text = getText(bp);
                    continue;
                } else if (bp.isMimeType("text/html")) {
                    return text;
                } else {
                    return getText(bp);
                }
            }
            return text;
        } else if (p.isMimeType("multipart/*")) {
            Multipart mp = (Multipart)p.getContent();
            for (int i = 0; i < mp.getCount(); i++) {
                String s = getText(mp.getBodyPart(i));
                if (s != null)
                    return s;
            }
        }

        return null;
    }


    public void LoadMail(){
        try {
            jButton2.disable();
            Address[] add = msg.getFrom();
            String email = add[0].toString();
            if (email.lastIndexOf("<")!=-1){
                    email = email.substring(email.lastIndexOf("<")+1, email.lastIndexOf(">"));
                }
            jTextField1.setText(email);
            jTextField2.setText(msg.getSubject());    
            Object content = msg.getContent();
            String body="";
            String StrAt="";                       
            
            
            if (content instanceof Multipart)
            {
                Multipart multipart = (Multipart) content;
                for (int i = 0; i < multipart.getCount(); i++)
                    {
                        BodyPart part = multipart.getBodyPart(i);                                                
                        String disposition = part.getDisposition();                        
                        if (disposition != null && (disposition.equals("ATTACHMENT")))                  
                            {                                 
                                 DataHandler handler = part.getDataHandler();                                    
                                 StrAt = StrAt + handler.getName() + " ";  
                                 jButton2.enable();
                            } 
                        else {
                            body = body + getText(part);
                        }
                    }
                jTextArea1.setText(body);
                jLabel4.setText(StrAt);
            // ...
            }
            else
            {
                jTextArea1.setText(content.toString());
            }         
            originalData = jTextArea1.getText().getBytes("ISO-8859-1");
        } catch (Exception ex) {
            Logger.getLogger(Read_Mail.class.getName()).log(Level.SEVERE, null, ex);
        } 
        
        
    }
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Read_Mail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Read_Mail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Read_Mail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Read_Mail.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Read_Mail().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JButton jButton3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JTextField jTextField1;
    private javax.swing.JTextField jTextField2;
    // End of variables declaration//GEN-END:variables
}
