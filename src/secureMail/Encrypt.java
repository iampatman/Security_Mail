/*
 * To change this template, choose Tools | Templates
 * and open the template in the editor.
 */
package secureMail;

/**
 *
 * @author PC
 */
import java.io.File;
import java.io.FileInputStream;
import java.io.FileOutputStream;
import java.io.InputStream;
import java.io.OutputStream;
import java.security.*;
import java.security.spec.X509EncodedKeySpec;
import java.util.Arrays;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.activation.DataHandler;
import javax.activation.DataSource;
import javax.activation.FileDataSource;
import javax.crypto.Cipher;
import javax.crypto.NoSuchPaddingException;
import javax.crypto.SecretKey;
import javax.crypto.spec.SecretKeySpec;
import javax.mail.BodyPart;
import javax.mail.MessagingException;
import javax.mail.Multipart;
import javax.mail.internet.MimeBodyPart;
import javax.mail.internet.MimeMultipart;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
public class Encrypt extends javax.swing.JFrame {

    /**
     * Creates new form Encrypt
     */
    byte[] data;
    byte[] mailcontent;
    PublicKey pub;
    PrivateKey  priv;
    SecretKey secretkey;
    byte[] signed;
    Multipart multipart;
    int encryptiontype;
    byte[] encryptedKey;
    ContactList contactlist;
    String email;
    public Encrypt(PrivateKey priv, PublicKey pub, byte[] data,Compose_mail cmp_mail,ContactList list) {
        initComponents();
        this.priv = priv;
        this.pub = pub;
        this.mailcontent = data;
        this.multipart = cmp_mail.multipart;
        this.contactlist = list;
        this.email = cmp_mail.email;
    }

    private Encrypt() {
        throw new UnsupportedOperationException("Not yet implemented");
    }
    private void ExtractData(){
        
    }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jComboBox1 = new javax.swing.JComboBox();
        jCheckBox3 = new javax.swing.JCheckBox();
        jLabel1 = new javax.swing.JLabel();
        jButton1 = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();

        setTitle("Encrytion Option");

        jComboBox1.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "None", "Symmetric", "Both" }));

        jCheckBox3.setText("Sign");

        jLabel1.setText("Encrytion: ");

        jButton1.setText("OK");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel2.setText("Encrytion Option");

        org.jdesktop.layout.GroupLayout layout = new org.jdesktop.layout.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(org.jdesktop.layout.GroupLayout.TRAILING, layout.createSequentialGroup()
                .addContainerGap(33, Short.MAX_VALUE)
                .add(jLabel2)
                .add(29, 29, 29))
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel1)
                .add(10, 10, 10)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
                    .add(jButton1)
                    .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING, false)
                        .add(jComboBox1, 0, 126, Short.MAX_VALUE)
                        .add(jCheckBox3, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(org.jdesktop.layout.GroupLayout.LEADING)
            .add(layout.createSequentialGroup()
                .addContainerGap()
                .add(jLabel2)
                .add(16, 16, 16)
                .add(layout.createParallelGroup(org.jdesktop.layout.GroupLayout.BASELINE)
                    .add(jComboBox1, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE, org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, org.jdesktop.layout.GroupLayout.PREFERRED_SIZE)
                    .add(jLabel1))
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jCheckBox3)
                .addPreferredGap(org.jdesktop.layout.LayoutStyle.RELATED)
                .add(jButton1)
                .addContainerGap(org.jdesktop.layout.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents
    public void Sign(){
        Encryption myen = new Encryption();
        myen.priv = this.priv;
        myen.Sign(data);        
    }
    public PublicKey Load_PublicKey(){        
        PublicKey publicKey = null;
        if (contactlist.list.isEmpty()||(publicKey = contactlist.FindPublicKey(email))==null) {
            FileInputStream keyfis = null;
            try {
                JFileChooser filechooser = new JFileChooser();
                String filename;
                String filepath="";
                int returnVal = filechooser.showOpenDialog(this);
                if(returnVal == JFileChooser.APPROVE_OPTION) {
                    filename = filechooser.getSelectedFile().getName();
                    filepath = filechooser.getSelectedFile().getAbsolutePath();
                }
                Encryption e = new Encryption();               
                publicKey  = e.ImportPublicKey(filepath);
                
                
                if (contactlist==null){
                    contactlist = new ContactList();
                }
                contactlist.AddContact(new Contact(email,publicKey));
                contactlist.SaveData();
                      
            }   
            catch (Exception e) {            
                return null;
                }        
            }
        return publicKey;   
       
    }
    private Multipart Symmetric(){
     
        byte[] plaintext = mailcontent;
        byte[] cyphertext = null;
        String filename;        
        Multipart encrypted = new MimeMultipart();
     
            try {
                // khoi tao du lieu
                Cryptography cryptography = new Cryptography(plaintext, cyphertext);                             
                KeyManager keymanager = new KeyManager(this.pub,this.priv);
                // tao secret key de ma hoa doi xung
                keymanager.generateSecretKey();       
                
                secretkey = keymanager.getSecretKey();
                // Xua secret key ra file de attach chung voi mail
                keymanager.exportKey("SecretKey", secretkey);
                // ma hoa noi dung mail bang ma hoa doi xung
                cryptography.symmetricEncrypt(secretkey);   
                // add vo Multipart moi 
                data = cryptography.getCiphertext();
                BodyPart part = new MimeBodyPart();
                String text = new String(data, "ISO-8859-1");
                this.mailcontent = data;
                part.setText(text);
                encrypted.addBodyPart(part);
                byte buff[];                               
                
                for (int i=0;i<multipart.getCount();i++){                                                 
                    part = multipart.getBodyPart(i);
                    String disposition = part.getDisposition();                     
                    filename = part.getFileName();
                    if (disposition != null && (disposition.equals("attachment"))) {  
                        // Lay du lieu tu file attached ra
                         InputStream is = part.getInputStream();                                                               
                         buff = new byte[is.available()];
                         is.read(buff, 0, is.available());                                        
                         cryptography.plaintext = buff;
                         // Ma hoa dua ra mang data
                         cryptography.symmetricEncrypt(secretkey);                         
                         data = cryptography.getCiphertext();                         
                         //Ghi mang data ra file
                         File f = new File("temp"+i);
                         FileOutputStream fo = new FileOutputStream(f);
                         fo.write(data);      
                         fo.flush();
                         fo.close();
                         // add vo multipart da duoc ma hoa
                         BodyPart newpart = new MimeBodyPart();
                         DataSource source = new FileDataSource(f.getAbsolutePath());                         
                         newpart.setDataHandler(new DataHandler(source));
                         newpart.setFileName(filename);
                         encrypted.addBodyPart(newpart);
                         // xoa file tam di                         
                     }                
                }
            } catch (Exception ex) {
                Logger.getLogger(Encrypt.class.getName()).log(Level.SEVERE, null, ex);
            }
            
               
        return encrypted;
        
        
        
        
        
        
        
    }
    public byte[] MergeByteArrat(byte[] a, byte[] b){
        byte[] c;
        c = new byte[a.length + b.length];
        int i=0;
        for (i=0;i<a.length;i++){
            c[i] = a[i];
        }       
        i = a.length;
        for (int j=0;j<b.length;j++){
            c[i] = b[j];
            i++;
        }
            
        return c;
    }

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        // TODO add your handling code here:          
        encryptiontype = jComboBox1.getSelectedIndex();
        
        
        data = Arrays.copyOf(mailcontent, mailcontent.length);
        if (jComboBox1.getSelectedIndex()!=0){
            multipart = this.Symmetric();
            if (jComboBox1.getSelectedIndex()==2){
                Cryptography c = new Cryptography();
                PublicKey RecPubKey = Load_PublicKey();                
                encryptedKey = c.asymmetricEncrypt(RecPubKey, secretkey);                            
            }
            
        } 
        
        
        data = Arrays.copyOf(mailcontent, mailcontent.length);
        byte buff[];
            try {
            for (int i=0;i<multipart.getCount();i++){
            
                BodyPart part = multipart.getBodyPart(i);
                String disposition = part.getDisposition();                        
                if (disposition != null && (disposition.equals("attachment"))) {
                     InputStream is = part.getInputStream();                                                               
                     buff = new byte[is.available()];
                     is.read(buff, 0, is.available());                 
                     int len = data.length;             
                     data = MergeByteArrat(data, buff);                  
                     
                     /*
                     data = Arrays.copyOf(data, data.length+buff.length);
                     int j=0;
                     while (j<buff.length){
                         data[len+j] = buff[j];
                         j++;
                     }
                     */
                 }                
            } }
            catch (Exception ex) {
                Logger.getLogger(Encrypt.class.getName()).log(Level.SEVERE, null, ex);
            
            } 
        
        // them vao attachment file signature va secret key de ben nhan mail co the giai ma duoc mai va xac n
        // nhan chu ky
       if (jCheckBox3.isSelected()==true){         
            this.Sign();            
            try {
                BodyPart part = new MimeBodyPart();
                DataSource source = new FileDataSource("signature");
                part.setDataHandler(new DataHandler(source));
                part.setFileName("signature");
                multipart.addBodyPart(part);               
            } catch (Exception ex) {
                Logger.getLogger(Compose_mail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jComboBox1.getSelectedIndex()==1){
            try {
                BodyPart part = new MimeBodyPart();
                DataSource source = new FileDataSource("SecretKey");
                part.setDataHandler(new DataHandler(source));
                part.setFileName("SecretKey");
                multipart.addBodyPart(part);               
            } catch (Exception ex) {
                Logger.getLogger(Compose_mail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        if (jComboBox1.getSelectedIndex()==2){
            try {
                BodyPart part = new MimeBodyPart();
                DataSource source = new FileDataSource("encryptedKey");
                part.setDataHandler(new DataHandler(source));
                part.setFileName("encryptedKey");
                multipart.addBodyPart(part);               
            } catch (Exception ex) {
                Logger.getLogger(Compose_mail.class.getName()).log(Level.SEVERE, null, ex);
            }
        }
        this.hide();

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Encrypt.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new Encrypt().setVisible(true);
            }
        });
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JCheckBox jCheckBox3;
    private javax.swing.JComboBox jComboBox1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    // End of variables declaration//GEN-END:variables
}
